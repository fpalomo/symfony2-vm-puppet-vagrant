<?xml version="1.0" encoding="UTF-8"?>

<project name="symfony2-project" default="build">
	<property name="source" value="../src"/>
	<property name="ignore" value="build"/>

	<target name="build"
	   depends="prepare,phploc,lint,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpunit,phpcb,behat"/>

	<target name="build-all"
	   depends="prepare,phploc,lint,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpdoc,phpunit,phpcb,behat"/>

	 <target name="build-parallel"
	   depends="prepare,lint,tools-parallel,phpunit,phpcb"/>

	 <target name="tools-parallel" description="Run tools in parallel">
		<parallel threadCount="2">
			<sequential>
				<antcall target="pdepend"/>
				<antcall target="phpmd-ci"/>
			</sequential>
			<antcall target="phpcpd"/>
			<antcall target="phpcs-ci"/>
			<antcall target="phploc"/>
<!--			<antcall target="phpdoc"/>  -->
            <antcall target="phpunit"/>
            <antcall target="behat"/>
		</parallel>
	 </target>



	<target name="clean-cache" depends="clean-cache-folders" description="clear symfony cache">
		<exec executable="php">
			<arg value="../app/console" />
			<arg value="--env=test" />
			<arg value="cache:clear" />
		</exec>
	</target>

	<target name="schema-update" description="DB schema update">
		<echo message="Checking if schema update is necessary"/>
		<exec executable="php">
			<arg value="../app/console" />
			<arg value="doctrine:schema:update" />
			<arg value="--force" />
            <arg value="--env=test" />
		</exec>
	</target>

    <target name="composer-install">
        <exec executable="php" dir="${basedir}/../">
            <arg value="composer.phar" />
            <arg value="install" />
        </exec>
    </target>

    <target name="assets-install" description="Installs bundles web assets under a public web directory">
        <echo message="Installing bundles web assets under a public web directory"/>
        <exec executable="php"  dir="${basedir}/../">
            <arg value="app/console" />
            <arg value="assets:install" />
        </exec>
    </target>

    <target name="assetic-dump" depends="assets-install" description="Dumps all assets to the filesystem">
        <echo message="Dumps all assets to the filesystem"/>
        <exec executable="php"  dir="${basedir}/../">
            <arg value="app/console" />
            <arg value="assetic:dump" />
        </exec>
    </target>

    <target name="clean-cache-folders" description="Cleanup build artifacts">
        <delete dir="${basedir}/../app/cache/test" />
        <delete dir="${basedir}/../app/cache/test_new" />
        <delete dir="${basedir}/../app/cache/test_old" />
        <delete dir="${basedir}/../app/cache/prod" />
        <delete dir="${basedir}/../app/cache/prod_new" />
        <delete dir="${basedir}/../app/cache/prod_old" />
    </target>

    <target name="clean" description="Cleanup build artifacts">
		<delete dir="${basedir}/api" />
		<delete dir="${basedir}/code-browser" />
		<delete dir="${basedir}/logs" />
		<delete dir="${basedir}/pdepend"/>
		<delete dir="${basedir}/coverage"/>
		<delete dir="${basedir}/features" />
	</target>

	<target name="prepare" depends="clean" description="Prepare for build">
		<mkdir dir="${basedir}/api" />
		<mkdir dir="${basedir}/code-browser" />
		<mkdir dir="${basedir}/logs" />
		<mkdir dir="${basedir}/pdepend"/>
		<mkdir dir="${basedir}/coverage"/>
		<mkdir dir="${basedir}/features" />
		<exec executable="php">
			<arg path="${basedir}/../vendor/sensio/distribution-bundle/Sensio/Bundle/DistributionBundle/Resources/bin/build_bootstrap.php" />
		</exec>
	</target>

	<target name="lint" description="Check php syntaxis">
		<apply executable="php" failonerror="true">
			<arg value="-l" />

			<fileset dir="${basedir}/../app">
				<exclude name="**/cache/**" />
				<include name="**/*.php" />
			</fileset>

			<fileset dir="${basedir}/../src">
				<exclude name="**/cache/**" />
                <exclude name="**/GoogleBundle/**" />
                <exclude name="**/GeoIpBundle/**" />
				<include name="**/*.php" />
			</fileset>
		</apply>
	</target>

	<target name="phpcpd" description="Find duplicate code using PHPCPD">
		<exec executable="phpcpd">
			<arg value="--log-pmd" />
			<arg value="${basedir}/logs/pmd-cpd.xml" />
          	<arg path="${basedir}/../src" />
		</exec>
	</target>

	<target name="phpdoc"
          description="Generate API documentation using PHPDocumentor">
    	<exec executable="phpdoc">
      		<arg line="-d ${source} -t ${basedir}/api -i ${ignore}" />
    	</exec>
  </target>

	<target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
		<exec executable="phpcs">
			<arg value="--report=checkstyle" />
			<arg value="--report-file=${basedir}/logs/checkstyle.xml" />
			<arg value="--standard=Symfony2" />
			<arg path="${basedir}/../src" />
		</exec>
	</target>

	<target name="pdepend" description="Calculate software metrics using PHP_Depend">
		<exec executable="pdepend">
			<arg value="--jdepend-xml=${basedir}/logs/jdepend.xml" />
			<arg value="--jdepend-chart=${basedir}/pdepend/dependencies.svg" />
			<arg value="--overview-pyramid=${basedir}/pdepend/overview-pyramid.svg" />
            <arg value="${basedir}/../src" />
		</exec>
	</target>

	<target name="phploc" description="Measure project size using PHPLOC">
		<exec executable="phploc">
			<arg value="--exclude" />
			<arg value="${basedir}/../app/cache" />
			<arg value="--log-csv" />
			<arg value="${basedir}/logs/phploc.csv" />
			<arg path="${basedir}/../app" />
			<arg path="${basedir}/../src" />
		</exec>
	</target>

	<target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
		<exec executable="phpcb">
			<arg value="--log" />
			<arg path="${basedir}/logs" />
			<arg value="--source" />
			<arg path="${basedir}/../src" />
			<arg value="--output" />
			<arg path="${basedir}/code-browser" />
		</exec>
	</target>

	<target name="phpmd"
	     description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="phpmd">
			<arg path="${basedir}/../src" />
			<arg value="text" />
			<arg value="${basedir}/phpmd.xml" />
		</exec>
	</target>

	<target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
		<exec executable="phpmd">
            <arg path="${basedir}/../src" />
            <arg value="xml" />
            <arg value="${basedir}/phpmd.xml" />
            <arg value="--reportfile" />
            <arg value="${basedir}/logs/pmd.xml" />
		</exec>
	</target>

	<target name="phpunit" description="Run unit tests with PHPUnit" depends="composer-install, assetic-dump, clean-cache, schema-update">
		<exec executable="phpunit" failonerror="false">
			<arg value="-c" />
			<arg path="${basedir}/../build" />
			<arg value="--stderr" />
		</exec>
	</target>

	<target name="behat" depends="composer-install, assetic-dump, clean-cache, schema-update">
		<exec executable="php" dir="${basedir}/../"  failonerror="false">
			<arg value="${basedir}/../vendor/behat/behat/bin/behat" />
			<arg value="--format=html,junit,pretty" />
			<arg value="--out=${basedir}/behat.html,${basedir}/features/,"/>
		</exec>
	</target>
</project>
